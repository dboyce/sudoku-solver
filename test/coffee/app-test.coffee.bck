#Sudoku = require './app'
#
#check_containers = (assert, cell, names)->
#  assert.equal container.name, names[i], cell for container, i in cell.containers
#
#
#module.exports =
#
#
##  "test map grid coordinates to box" : (beforeExit, assert)->
##
##    grid = new Sudoku.Grid()
##
##    # test a cell in each box
##    assert.equal grid.toBox(3,3), 1
##    assert.equal grid.toBox(6,1), 2
##    assert.equal grid.toBox(7,2), 3
##    assert.equal grid.toBox(1,4), 4
##    assert.equal grid.toBox(5,5), 5
##    assert.equal grid.toBox(8,6), 6
##    assert.equal grid.toBox(2,7), 7
##    assert.equal grid.toBox(4,8), 8
##    assert.equal grid.toBox(9,9), 9
##
##  "test cell containers" : (beforeExit, assert) ->
##
##    grid = new Sudoku.Grid()
##
##
##    check_containers assert, grid.cells[0], ["col 1", "row 1", "box 1"]
##
##    check_containers assert, grid.cells[8], ["col 9", "row 1", "box 3"]
##
##    check_containers assert, grid.cells[80], ["col 9", "row 9", "box 9"]
##
##  "test get cell by coords" : (beforeExit, assert) ->
##
##    grid  = new Sudoku.Grid()
##
##    cell = grid.getCell 1, 9
##
##    assert.equal cell.x, 1
##    assert.equal cell.y, 9
##
##    cell = grid.getCell 8, 9
##
##    assert.equal cell.x, 8
##    assert.equal cell.y, 9
#
#  "test eliminate possibilities" : (beforeExit, assert) ->
#
#    grid = new Sudoku.Grid
#    rule = new Sudoku.UniquenessRule
#    cell = grid.getCell 1, 1
#
#    cell.solve 1
#
#    rule.apply(container) for container in cell.containers
##
#    # every cell in every affected container now has 1 eliminated...
#    for container in [grid.rows[1], grid.colls[1], grid.boxes[1]]
#      for cell in container.cells
#        assert.ok(not cell.possibleValue(1))
#        assert.equal(cell.possibilities.length, 8) unless cell.solved
#
#
#  "test only possible solution" : (beforeExit, assert) ->
#
#    grid = new Sudoku.Grid
#    rule = new Sudoku.UniquenessRule
#    rule2 = new Sudoku.OnlyPossibleCellRule
#    cell = grid.getCell 2, 8
#
#    grid.solveCell 1, 1, 3
#    grid.solveCell 3, 4, 3
#    grid.solveCell 9, 7, 3
#    grid.solveCell 6, 9, 3
#
#    for container in cell.containers
#      console.log(container.name)
#      rule.apply(container)
#      rule2.apply(container)
#
#    console.log("#{grid.getCell(1, 8).eliminated[3]}")
#
#    console.log("#{cell} #{cell.possibilities}") for cell in grid.boxes[7].cells
#
#    assert.ok cell.solved
#    assert.equal cell.value, 3
#
#
#
#
#
#
#
#
#
#
